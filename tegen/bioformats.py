"""
The code below is a wrapper around the bioinformatics package for easier
reading of bioformats files such as those generated by 
the Tegenfeldt STED microscope.

Written by Wouter Duverger (2021)

Usage:

    from tegen import bioformats

    # Read file
    images = bioformats.read_file(filepath)
    
    # Use image data
    image = images['channel_name']

    # Access image metadata
    image.meta

    # The following metadata is stored in image.meta, 
    # but can also be accessed directly
    image.pixel_size
    image.origin_x
    image.origin_y

    # Kill the JVM
    bioformats.shutdown_jvm()
    
"""

import bioformats
import javabridge
import numpy as np

def read_file(path):
    """
    Read all images inside a single bioformats file.
    Returns a dict that maps channel names to N-dimensional (ordering TZYX)
    image stacks, including microscope metadata
    """

    # Bioformats requires a running Java VM
    MyJvm.start_if_not_running()

    print(f'Bioformats: reading file at "{path}"')

    # These dicts will be filled and returned to the caller
    images_dict = {}

    # Get the metadata from the image file
    metadata = bioformats.OMEXML(bioformats.get_omexml_metadata(path))

    # Construct an image reader instance
    reader = bioformats.get_image_reader(key=path, path=path)

    # Loop over all images inside the file
    for i in range(metadata.image_count):

        # Get information on that image
        img_meta = metadata.image(i)
        image_name = img_meta.Name
        plane_count = img_meta.Pixels.SizeZ
        t_count = img_meta.Pixels.SizeT

        # Iterate over time points
        t_list = []
        for t in range(t_count):

            # Iterate over z points
            z_list = []
            for z in range(plane_count):
                z_list.append(reader.read(series=i, z=z, t=t))

            t_list.append(z_list)

        # Convert the list of numpy arrays to a numpy array
        # and store it in the dict, with the channel name as key
        images_dict[image_name] = BFImageArray(
            np.squeeze(t_list), img_meta
        )

    # Return the images
    return images_dict


class BFImageArray(np.ndarray):
    """
    Subclass of numpy.ndarray that adds some properties for easier access 
    to metadata. All bioformats metadata can be accessed using the `meta`
    property, but pixel size and image origins are also present as
    individual properties. 

    Credits to https://numpy.org/doc/stable/user/basics.subclassing.html
    """

    def __new__(cls, input_array, meta):

        # Generate an array object with the right data in our class type
        obj = np.asarray(input_array).view(cls)

        # Add the new attributes to the created instance
        obj.meta = meta
        obj.pixel_size = meta.Pixels.PhysicalSizeX
        obj.origin_x = meta.Pixels.Plane().PositionX
        obj.origin_y = meta.Pixels.Plane().PositionY

        # Return the object
        return obj

    def __array_finalize__(self, obj):
        # See docs referred to above for details of this method

        if obj is None:
            return

        self.meta = getattr(obj, 'meta', None)
        self.pixel_size = getattr(obj, 'pixel_size', None)
        self.origin_x = getattr(obj, 'origin_x', None)
        self.origin_y = getattr(obj, 'origin_y', None)


class MyJvm:

    _did_start_vm = False

    @classmethod
    def start_if_not_running(cls):
        if not MyJvm._did_start_vm:
            print('Bioformats: starting VM')
            javabridge.kill_vm()

            javabridge.start_vm(class_path=bioformats.JARS)
            MyJvm._did_start_vm = True

            # Suppress most logging from the bioformats package
            myloglevel = "OFF"
            rootLoggerName = javabridge.get_static_field(
                "org/slf4j/Logger", "ROOT_LOGGER_NAME", "Ljava/lang/String;")
            rootLogger = javabridge.static_call(
                "org/slf4j/LoggerFactory", "getLogger", "(Ljava/lang/String;)Lorg/slf4j/Logger;", rootLoggerName)
            logLevel = javabridge.get_static_field(
                "ch/qos/logback/classic/Level", myloglevel, "Lch/qos/logback/classic/Level;")
            javabridge.call(
                rootLogger, "setLevel", "(Lch/qos/logback/classic/Level;)V", logLevel)


def shutdown_jvm():
    """ 
    Kill the JVM. Scripts will never finish if you don't do this at the end.
    (Note that it is fine in notebooks.)
    """
    javabridge.kill_vm()
    MyJvm._did_start_vm = False
    print('Bioformats: shut down JVM')
